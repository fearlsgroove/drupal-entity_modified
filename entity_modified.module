<?php

/**
 * @file
 * Hook implementations and frequently used functions for entity modified module.
 */

/**
 * Implements hook_entity_delete().
 *
 * Delete our custom stored entity modified record when the entity is deleted.
 */
function entity_modified_entity_delete($entity, $type) {
  // Attempt to delete any record we stored for the entity. We do not check
  // if it has a modified property because our knowledge of the property could
  // have occurred after we already had a record (module updates).
  list($entity_id) = entity_extract_ids($type, $entity);

  db_delete('entity_modified')
      ->condition('entity_type', $type)
      ->condition('entity_id', $entity_id)
      ->execute();
}

/**
 * Implements hook_entity_insert().
 */
function entity_modified_entity_insert($entity, $type) {
  // If the module does not have a modified property that we know about then
  // insert.
  if (!entity_modified_property_name($type)) {
    list($entity_id) = entity_extract_ids($type, $entity);
    db_insert('entity_modified')
        ->fields(array(
          'entity_type' => $type,
          'entity_id' => $entity_id,
          'modified' => REQUEST_TIME,
        ))
        ->execute();
  }
}

/**
 * Implements hook_entity_update().
 */
function entity_modified_entity_update($entity, $type) {
  // If the module does not have a modified property that we know about then
  // insert or update.
  if (!entity_modified_property_name($type)) {
    list($entity_id) = entity_extract_ids($type, $entity);
    db_merge('entity_modified')
        ->key(array(
          'entity_type' => $type,
          'entity_id' => $entity_id,
        ))
        ->fields(array(
          'modified' => REQUEST_TIME,
        ))
        ->execute();
  }
}

/**
 * Retrieve the last time an entity was modified.
 */
function entity_modified_last($entity_type, $entity) {
  $name = entity_modified_property_name($entity_type);

  // If native modified timestamp known.
  if ($name) {
    return $entity->$name;
  }

  // Retrieve entity's last modified from our custom table.
  list($entity_id) = entity_extract_ids($entity_type, $entity);

  $modified_timestamp = db_query(
    'SELECT modified FROM {entity_modified} WHERE entity_type = :entity_type AND entity_id = :entity_id',
    array(':entity_type' => $entity_type, ':entity_id' => $entity_id)
  )->fetchField();

  // If not found then use '1' as inserting something in a read-only operation
  // is a bad idea.
  if (!$modified_timestamp) {
    $modified_timestamp = 1;
  }

  return $modified_timestamp;
}

/**
 * Retrieve the last modified property name.
 *
 * @param string $entity_type
 *   The entity type to retrieve the property name for.
 *
 * @return array|string|FALSE
 *   - Returns the whole list of property names if no entity type is given.
 *   - Returns a string if a modified property exists on the given entity_type.
 *   - Else returns FALSE
 */
function entity_modified_property_name($entity_type = NULL) {
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['modified_property_names'] = &drupal_static(__FUNCTION__);
  }
  $modified_property_names = &$drupal_static_fast['modified_property_names'];

  if (!isset($modified_property_names)) {
    $modified_property_names = module_invoke_all('entity_modified_property_names');
    drupal_alter('entity_modified_property_names', $modified_property_names);
  }

  if (!isset($entity_type)) {
    return $modified_property_names;
  }
  if (isset($modified_property_names[$entity_type])) {
    return $modified_property_names[$entity_type];
  }
  return FALSE;
}

/**
 * Implements hook_entity_modified_property_names().
 *
 * Eating own dog food, define unique identifiers for entity types this module
 * is aware of.
 *
 * @return $modified_property_names.
 *   Array of modified property names keyed by entity_type.
 */
function entity_modified_entity_modified_property_names() {
  $modified_property_names = array();
  // Core entity types.
  $modified_property_names['comment'] = 'changed';
  $modified_property_names['node'] = 'changed';

  // File entity module.
  $modified_property_names['file'] = 'timestamp';

  return $modified_property_names;
}
